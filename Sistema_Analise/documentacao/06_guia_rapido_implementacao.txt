GUIA R√ÅPIDO DE IMPLEMENTA√á√ÉO
=============================

RESUMO EXECUTIVO PARA IMPLEMENTA√á√ÉO IMEDIATA
=============================================

‚úÖ SUA ABORDAGEM EST√Å CORRETA!
- Python √© perfeito para processar Excel
- IDs sequenciais (01, 02, 03...) s√£o ideais
- Google Forms ‚Üí Excel ‚Üí Python funciona perfeitamente
- JavaScript √© OPCIONAL (s√≥ se quiser interface din√¢mica)

üöÄ PR√ìXIMOS PASSOS RECOMENDADOS
===============================

1. CONFIGURAR GOOGLE FORMS (30 min)
   ‚úì Criar 3 formul√°rios separados
   ‚úì Adicionar campo "ID_Participante" 
   ‚úì Configurar salvamento em Google Sheets
   ‚úì Configurar export autom√°tico para Excel

2. IMPLEMENTAR MONITOR B√ÅSICO (1 hora)
   ‚úì Instalar depend√™ncias: pip install watchdog openpyxl pandas
   ‚úì Criar monitor_tempo_real.py (c√≥digo no arquivo 04)
   ‚úì Testar com dados fict√≠cios

3. CONFIGURAR SINCRONIZA√á√ÉO (15 min)
   ‚úì OneDrive Desktop ou Google Drive Desktop
   ‚úì Pasta compartilhada para arquivos Excel
   ‚úì Sincroniza√ß√£o autom√°tica

4. TESTE FINAL (30 min)
   ‚úì Responder question√°rio teste
   ‚úì Verificar processamento autom√°tico
   ‚úì Confirmar gera√ß√£o de diagn√≥stico

IMPLEMENTA√á√ÉO M√çNIMA VI√ÅVEL (2 HORAS)
=====================================

ARQUIVO 1: monitor_simples.py
```python
import pandas as pd
import os
import time
import json
from datetime import datetime

def processar_novo_participante(arquivo_excel, id_participante):
    """Processa uma nova resposta"""
    print(f"Processando participante {id_participante}")
    
    # Ler dados da planilha
    df = pd.read_excel(arquivo_excel, sheet_name=f'Participante_{id_participante:03d}')
    
    # Calcular pontua√ß√£o simples
    colunas_respostas = [col for col in df.columns if col.startswith('Pergunta')]
    pontuacao = df[colunas_respostas].sum(axis=1).iloc[0]
    
    # Determinar categoria
    if pontuacao < 40:
        categoria = "baixo"
    elif pontuacao < 80:
        categoria = "moderado"
    else:
        categoria = "alto"
    
    # Salvar resultado
    resultado = {
        'id_participante': id_participante,
        'pontuacao': int(pontuacao),
        'categoria': categoria,
        'timestamp': datetime.now().isoformat()
    }
    
    with open(f'resultado_{id_participante:03d}.json', 'w') as f:
        json.dump(resultado, f, indent=2)
    
    print(f"‚úÖ Participante {id_participante}: {categoria} ({pontuacao} pontos)")
    return resultado

def monitorar_arquivos():
    """Monitor b√°sico de arquivos"""
    ultimo_check = {}
    
    while True:
        for arquivo in ['questionario_estresse.xlsx', 'questionario_menacme.xlsx']:
            if os.path.exists(arquivo):
                # Verificar modifica√ß√£o
                modificacao = os.path.getmtime(arquivo)
                
                if arquivo not in ultimo_check or modificacao > ultimo_check[arquivo]:
                    ultimo_check[arquivo] = modificacao
                    
                    # Verificar novas planilhas
                    try:
                        xl_file = pd.ExcelFile(arquivo)
                        for sheet in xl_file.sheet_names:
                            if sheet.startswith('Participante_'):
                                id_part = int(sheet.split('_')[1])
                                
                                # Verificar se j√° foi processado
                                if not os.path.exists(f'resultado_{id_part:03d}.json'):
                                    processar_novo_participante(arquivo, id_part)
                    except Exception as e:
                        print(f"Erro ao processar {arquivo}: {e}")
        
        time.sleep(5)  # Verificar a cada 5 segundos

if __name__ == "__main__":
    print("Monitor simples iniciado...")
    monitorar_arquivos()
```

TESTE R√ÅPIDO (15 min)
====================

1. CRIAR ARQUIVO DE TESTE
```python
# criar_teste.py
import pandas as pd

# Dados fict√≠cios
dados = {
    'ID_Participante': [1],
    'Pergunta_01': [3],
    'Pergunta_02': [4], 
    'Pergunta_03': [2],
    'Pergunta_04': [5],
    'Pergunta_05': [1]
}

df = pd.DataFrame(dados)

# Salvar com nome de aba espec√≠fico
with pd.ExcelWriter('questionario_estresse.xlsx') as writer:
    df.to_excel(writer, sheet_name='Participante_001', index=False)

print("Arquivo de teste criado!")
```

2. EXECUTAR TESTE
```
python criar_teste.py
python monitor_simples.py
```

CONFIGURA√á√ÉO GOOGLE FORMS
==========================

FORMUL√ÅRIO EXEMPLO:
```
T√≠tulo: Question√°rio de Estresse - Projeto PIBITI

Pergunta 1 (Obrigat√≥ria):
- Tipo: N√∫mero
- T√≠tulo: "Seu ID de Participante"
- Descri√ß√£o: "Digite um n√∫mero √∫nico (ex: 1, 2, 3...)"

Pergunta 2:
- Tipo: Escala Linear (1-5)
- T√≠tulo: "Com que frequ√™ncia voc√™ se sente estressado?"

[... mais perguntas ...]

Configura√ß√µes:
‚úì Coletar endere√ßos de e-mail: N√ÉO
‚úì Limitar a 1 resposta: N√ÉO  
‚úì Permitir edi√ß√£o ap√≥s envio: N√ÉO
```

CONFIGURAR RESPOSTA NO GOOGLE SHEETS:
```
Planilha1 (padr√£o):
A: Timestamp
B: ID_Participante
C: Pergunta_01
D: Pergunta_02
...

Script do Google Apps Script (opcional):
function onFormSubmit(e) {
  var sheet = SpreadsheetApp.getActiveSheet();
  var lastRow = sheet.getLastRow();
  var idParticipante = sheet.getRange(lastRow, 2).getValue();
  
  // Criar nova aba para este participante
  var novaAba = SpreadsheetApp.getActiveSpreadsheet()
    .insertSheet('Participante_' + String(idParticipante).padStart(3, '0'));
  
  // Copiar dados para nova aba
  var dados = sheet.getRange(lastRow, 1, 1, sheet.getLastColumn()).getValues();
  novaAba.getRange(1, 1, 1, dados[0].length).setValues(dados);
}
```

CHECKLIST FINAL
================

ANTES DE IMPLEMENTAR:
‚òê Google Forms criados e testados
‚òê Sincroniza√ß√£o OneDrive/Google Drive funcionando
‚òê Python instalado com depend√™ncias
‚òê Estrutura de pastas criada

DURANTE IMPLEMENTA√á√ÉO:
‚òê Monitor detecta arquivos corretamente
‚òê Processamento funciona com dados teste
‚òê Resultados s√£o salvos no formato correto
‚òê Logs mostram atividade do sistema

AP√ìS IMPLEMENTA√á√ÉO:
‚òê Teste com usu√°rios reais
‚òê Verificar performance com m√∫ltiplas respostas
‚òê Backup autom√°tico configurado
‚òê Documenta√ß√£o para usu√°ria final

D√öVIDAS FREQUENTES
==================

Q: Preciso de JavaScript?
A: N√ÉO. Python resolve tudo. JavaScript s√≥ para interface web bonita.

Q: E se o OneDrive falhar?
A: Backup local + Google Drive como alternativa.

Q: Quantos participantes suporta?
A: Centenas sem problema. Milhares com otimiza√ß√µes.

Q: E se quiser mudar as regras de pontua√ß√£o?
A: S√≥ editar config.json. Sistema √© flex√≠vel.

Q: Funciona sem internet?
A: Sim, ap√≥s sincroniza√ß√£o inicial dos arquivos.

CONTATO PARA D√öVIDAS
====================

Se precisar de ajuda:
1. Verificar logs em: logs/monitor.log
2. Testar com dados simples primeiro
3. Documentar erro espec√≠fico
4. Verificar permiss√µes de arquivos

CONCLUS√ÉO
=========

‚úÖ Sua abordagem est√° 100% correta
‚úÖ Python √© a ferramenta ideal  
‚úÖ Sistema √© escal√°vel e robusto
‚úÖ Implementa√ß√£o √© vi√°vel em poucas horas
‚úÖ JavaScript √© opcional, n√£o obrigat√≥rio

PR√ìXIMO PASSO: Implementar monitor_simples.py e testar!
