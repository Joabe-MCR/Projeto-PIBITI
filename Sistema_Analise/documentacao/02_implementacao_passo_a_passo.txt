IMPLEMENTAÇÃO PASSO A PASSO - SISTEMA EM TEMPO REAL
===================================================

PASSO 1: CONFIGURAÇÃO DOS GOOGLE FORMS
=======================================

1.1 CONFIGURAR GOOGLE FORMS
   - Criar 3 formulários separados
   - Configurar para salvar respostas no Google Sheets
   - Conectar Google Sheets com OneDrive (ou usar Google Drive)

1.2 ESTRUTURA DE ARQUIVOS SUGERIDA
   OneDrive/Questionarios/
   ├── questionario_estresse.xlsx
   ├── questionario_menacme.xlsx  
   └── questionario_personalizado.xlsx

1.3 CONFIGURAR ID AUTOMÁTICO
   - Adicionar coluna "ID_Participante" no início de cada formulário
   - Usar fórmula para gerar IDs sequenciais: 
     =TEXT(ROW()-1,"00") (no Google Sheets)

PASSO 2: MONITORAMENTO AUTOMÁTICO DE ARQUIVOS
==============================================

2.1 INSTALAR DEPENDÊNCIAS
   pip install watchdog openpyxl pandas jinja2

2.2 IMPLEMENTAR MONITOR DE ARQUIVOS
   - Usar biblioteca 'watchdog' para detectar mudanças
   - Monitorar pasta sincronizada do OneDrive
   - Processar automaticamente quando arquivo for modificado

2.3 CÓDIGO EXEMPLO:
```python
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import time

class MonitorQuestionarios(FileSystemEventHandler):
    def on_modified(self, event):
        if event.src_path.endswith('.xlsx'):
            print(f"Arquivo modificado: {event.src_path}")
            # Processar novo questionário
            self.processar_arquivo(event.src_path)
```

PASSO 3: PROCESSAMENTO DE NOVAS RESPOSTAS
==========================================

3.1 DETECTAR NOVAS PLANILHAS
   - Ler arquivo Excel
   - Identificar última aba/planilha criada
   - Comparar com registro anterior de IDs processados

3.2 EXTRAIR DADOS DA NOVA RESPOSTA
   - Ler dados da nova planilha
   - Validar completude das respostas
   - Aplicar regras de pontuação específicas

3.3 GERAR DIAGNÓSTICO INDIVIDUAL
   - Calcular scores por categoria
   - Aplicar algoritmo de classificação
   - Gerar relatório personalizado
   - Salvar em arquivo individual

PASSO 4: SISTEMA DE IDs E CONTROLE
===================================

4.1 ARQUIVO DE CONTROLE (controle_ids.json)
{
  "ultimo_id_processado": 15,
  "questionarios_processados": {
    "estresse": [1, 2, 3, ..., 15],
    "menacme": [1, 2, 3, ..., 14],
    "personalizado": [1, 2, 3, ..., 13]
  },
  "ultima_atualizacao": "2025-08-14T10:30:00"
}

4.2 VERIFICAÇÃO DE NOVOS IDs
   - Comparar IDs existentes com arquivo de controle
   - Processar apenas IDs não processados anteriormente
   - Atualizar arquivo de controle após processamento

PASSO 5: EXECUÇÃO CONTÍNUA
===========================

5.1 SCRIPT PRINCIPAL PARA EXECUÇÃO CONTÍNUA
```python
def executar_monitoramento():
    observer = Observer()
    handler = MonitorQuestionarios()
    observer.schedule(handler, pasta_onedrive, recursive=False)
    observer.start()
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
```

5.2 EXECUÇÃO COMO SERVIÇO
   - Windows: Usar Task Scheduler ou NSSM
   - Linux: Criar systemd service
   - Docker: Container sempre ativo

INTEGRAÇÃO OPCIONAL COM JAVASCRIPT/WEB
=======================================

SE QUISER INTERFACE WEB DINÂMICA:

1. CRIAR API REST (Flask/FastAPI)
```python
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/api/resultados/<int:user_id>')
def get_resultado(user_id):
    # Retornar resultado processado
    return jsonify(resultado)
```

2. FRONTEND JAVASCRIPT
```javascript
// Buscar resultado quando usuário termina questionário
fetch(`/api/resultados/${userId}`)
  .then(response => response.json())
  .then(data => mostrarResultado(data));
```

CONCLUSÃO
=========
✅ Python é suficiente para toda a lógica de processamento
✅ JavaScript é opcional, apenas para interface dinâmica
✅ Sistema pode funcionar completamente offline após setup inicial
✅ Escalável para centenas de participantes
