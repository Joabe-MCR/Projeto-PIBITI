CONFIGURAÇÃO TÉCNICA DETALHADA
===============================

ESTRUTURA DE PASTAS RECOMENDADA
================================

Projeto_PIBITI/
├── Sistema_Analise/
│   ├── monitor_tempo_real.py          # Script principal de monitoramento
│   ├── processador_questionarios.py   # Processamento de dados (já existe)
│   ├── gerador_diagnosticos.py        # Geração de relatórios (já existe)
│   ├── config.json                    # Configurações
│   ├── controle_ids.json              # Controle de IDs processados
│   ├── requirements.txt               # Dependências Python
│   ├── dados_entrada/                 # Pasta monitorada (OneDrive sync)
│   │   ├── questionario_estresse.xlsx
│   │   ├── questionario_menacme.xlsx
│   │   └── questionario_personalizado.xlsx
│   ├── resultados/                    # Resultados individuais
│   │   ├── participante_001_estresse.json
│   │   ├── participante_001_menacme.json
│   │   └── participante_001_completo.html
│   └── logs/                          # Logs do sistema
└── Site/                              # Seu site atual
    ├── index.html
    ├── script.js
    └── style.css

DEPENDÊNCIAS PYTHON NECESSÁRIAS
================================

requirements.txt:
```
pandas>=1.5.0
openpyxl>=3.1.0
xlrd>=2.0.0
jinja2>=3.1.0
watchdog>=3.0.0
flask>=2.3.0        # Se usar API web
fastapi>=0.100.0    # Alternativa ao Flask
requests>=2.31.0
python-dotenv>=1.0.0
schedule>=1.2.0     # Para tarefas agendadas
```

CONFIGURAÇÃO config.json ATUALIZADA
====================================

```json
{
  "pastas": {
    "dados_entrada": "./dados_entrada",
    "resultados": "./resultados", 
    "diagnosticos": "./diagnosticos",
    "logs": "./logs"
  },
  "arquivos_questionarios": {
    "estresse": "questionario_estresse.xlsx",
    "menacme": "questionario_menacme.xlsx", 
    "personalizado": "questionario_personalizado.xlsx"
  },
  "monitoramento": {
    "ativo": true,
    "intervalo_verificacao": 5,
    "backup_automatico": true
  },
  "ids": {
    "formato": "000",
    "inicio": 1,
    "arquivo_controle": "controle_ids.json"
  },
  "pontuacao": {
    "estresse": {
      "minimo": 0,
      "maximo": 120,
      "categorias": {
        "baixo": [0, 40],
        "moderado": [41, 80], 
        "alto": [81, 120]
      }
    },
    "menacme": {
      "minimo": 0,
      "maximo": 100,
      "categorias": {
        "baixo": [0, 33],
        "moderado": [34, 66],
        "alto": [67, 100]
      }
    }
  },
  "notificacoes": {
    "email_admin": "admin@projeto.com",
    "webhook_url": null,
    "log_nivel": "INFO"
  }
}
```

CONFIGURAÇÃO DO ONEDRIVE/GOOGLE DRIVE
======================================

OPÇÃO 1: OneDrive (Recomendado para Windows)
1. Instalar OneDrive Desktop
2. Configurar sincronização automática
3. Criar pasta: OneDrive/Projeto_PIBITI/dados_entrada/
4. Configurar Google Sheets para exportar automaticamente para esta pasta

OPÇÃO 2: Google Drive API
1. Criar projeto no Google Cloud Console
2. Ativar Google Sheets API e Google Drive API
3. Baixar credenciais JSON
4. Usar bibliotecas: gspread, google-api-python-client

Código exemplo para Google Sheets:
```python
import gspread
from google.oauth2.service_account import Credentials

def baixar_planilha_google(sheet_id, nome_arquivo):
    scope = ["https://spreadsheets.google.com/feeds", 
             "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_file("credenciais.json", scopes=scope)
    client = gspread.authorize(creds)
    
    sheet = client.open_by_key(sheet_id)
    # Exportar para Excel
    sheet.export(f"dados_entrada/{nome_arquivo}")
```

CONFIGURAÇÃO DOS GOOGLE FORMS
==============================

ESTRUTURA RECOMENDADA PARA CADA FORM:

1. CAMPO ID_PARTICIPANTE (Obrigatório)
   - Tipo: Número
   - Validação: Número inteiro positivo
   - Descrição: "Digite um número único para você (ex: 001, 002, 003...)"

2. TIMESTAMP AUTOMÁTICO
   - Google Forms adiciona automaticamente
   - Coluna "Timestamp" na planilha

3. PERGUNTAS DO QUESTIONÁRIO
   - Numeradas sequencialmente
   - Respostas em escala Likert ou múltipla escolha

EXEMPLO DE CONFIGURAÇÃO NO GOOGLE SHEETS:

Colunas da planilha resultante:
A: Timestamp
B: ID_Participante  
C: Pergunta_01
D: Pergunta_02
...
Z: Pergunta_24

CONFIGURAÇÃO DO WINDOWS TASK SCHEDULER
=======================================

Para executar o sistema automaticamente no Windows:

1. Abrir Task Scheduler (Agendador de Tarefas)
2. Criar Tarefa Básica
3. Configurações:
   - Nome: "Monitor Questionários PIBITI"
   - Gatilho: Na inicialização do sistema
   - Ação: Iniciar programa
   - Programa: python.exe
   - Argumentos: "c:\caminho\para\monitor_tempo_real.py"
   - Diretório: "c:\caminho\para\Sistema_Analise"

MONITORAMENTO E LOGS
====================

Configurar logging detalhado:

```python
import logging
from datetime import datetime

# Configurar logging
log_filename = f"logs/sistema_{datetime.now().strftime('%Y%m%d')}.log"
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename, encoding='utf-8'),
        logging.StreamHandler()  # Para ver no console também
    ]
)
```

BACKUP AUTOMÁTICO
=================

Implementar backup dos resultados:

```python
import shutil
from datetime import datetime

def fazer_backup():
    data_hoje = datetime.now().strftime('%Y%m%d_%H%M%S')
    pasta_backup = f"backup/backup_{data_hoje}"
    
    # Copiar pasta de resultados
    shutil.copytree("resultados", f"{pasta_backup}/resultados")
    shutil.copytree("diagnosticos", f"{pasta_backup}/diagnosticos")
    
    # Copiar arquivo de controle
    shutil.copy("controle_ids.json", f"{pasta_backup}/controle_ids.json")
```

TESTAGEM E VALIDAÇÃO
====================

1. TESTE COM DADOS FICTÍCIOS
   - Criar planilhas Excel de exemplo
   - Simular adição de novas respostas
   - Verificar processamento automático

2. TESTE DE CARGA
   - Simular 100+ participantes
   - Verificar performance do sistema
   - Monitorar uso de memória e CPU

3. TESTE DE FALHAS
   - Arquivo corrompido
   - Falha de rede
   - Interrupção do sistema

PRÓXIMO PASSO RECOMENDADO
=========================

1. Implementar monitor_tempo_real.py
2. Testar com dados fictícios
3. Configurar integração com Google Forms/OneDrive  
4. Executar testes de funcionamento
5. Documentar para usuária final
